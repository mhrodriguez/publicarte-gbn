<?php
/**
 * Created by PhpStorm.
 * User: davatar
 * Date: 6/9/17
 * Time: 12:39 a.m.
 */

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * VentaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VentaRepository extends EntityRepository
{

    public function obtenerVentasDeEmpresaPorFecha($empresa, $fechaInicio, $fechaFin)
    {
        $resultset = $this->getEntityManager()
            ->createQuery(
                "SELECT v FROM AppBundle:Venta v
                 JOIN v.empresa e
                 WHERE e.id = :idEmpresa
                 AND v.fecha >= :fechaInicio AND v.fecha <= :fechaFin
                 ORDER BY v.fecha ASC")
            ->setParameter("fechaInicio", $fechaInicio)
            ->setParameter("fechaFin", $fechaFin)
            ->setParameter("idEmpresa", $empresa->getId())
            ->getResult();

        return $resultset;
    }

    public function obtenerVentasDeEmpresaPorDia($empresa, $fechaInicio, $fechaFin)
    {
        $connection = $this->getEntityManager()->getConnection();

        // 1. Totales Activas
        $statement = $connection->prepare("SELECT c.fecha, c.total FROM
        (
        SELECT date(fecha) as fecha, Sum( total) as total FROM venta
                                           WHERE fecha > :fechaInicio AND fecha < :fechaFin AND id_empresa = :idEmpresa
                                           GROUP BY date(fecha)
                                           	ORDER BY date(fecha)
        ) c"   );
        $statement->bindValue("fechaInicio", $fechaInicio->format("Y-m-d H:i:s"));
        $statement->bindValue("fechaFin", $fechaFin->format("Y-m-d H:i:s"));
        $statement->bindValue("idEmpresa", $empresa->getId());
        $statement->execute();

        $resultado = $statement->fetchAll();

        return $resultado;
    }

    public function obtenerVentasComparativoAnual($empresa, $fecha)
    {
        $connection = $this->getEntityManager()->getConnection();

        // 1. Obtener el aÃ±o y el mes
        $anioactual = $fecha->format("Y");
        $mesactual = $fecha->format("n");

        $anioanterior = $anioactual-1;
        $anioanteanterior = $anioanterior-1;

        // 1. Totales Activas
        $statement = $connection->prepare("SELECT CONCAT(IFNULL(actual.periodo, 'N/A'),' vs. ', IFNULL(anterior.periodo, 'N/A')) AS periodo, actual.total AS totalactual, IFNULL(anterior.total,0) AS totalanterior FROM
(
SELECT MONTH(fecha) as mes, CONCAT(MONTH(fecha),'-',YEAR(fecha)) AS periodo,Sum(total) as total FROM venta WHERE id_empresa = :idEmpresa AND ((MONTH(fecha) > :mesactual AND YEAR(fecha) = :anioanterior) OR (MONTH(fecha) <= :mesactual AND YEAR(fecha) = :anioactual)) group by MONTH(fecha), CONCAT(MONTH(fecha),'-',YEAR(fecha))
) actual
left JOIN
(
SELECT MONTH(fecha) as mes, CONCAT(MONTH(fecha),'-',YEAR(fecha)) AS periodo, Sum( total) as total FROM venta
    WHERE id_empresa = :idEmpresa AND ((MONTH(fecha) > :mesactual AND YEAR(fecha) = :anioanteanterior) OR (MONTH(fecha) <= :mesactual AND YEAR(fecha) = :anioanterior))  group by MONTH(fecha), CONCAT(MONTH(fecha),'-',YEAR(fecha))
) anterior ON  actual.mes = anterior.mes"
        );
        $statement->bindValue("mesactual", $mesactual);
        $statement->bindValue("anioactual", $anioactual);
        $statement->bindValue("anioanterior", $anioanterior);
        $statement->bindValue("anioanteanterior", $anioanteanterior);
        $statement->bindValue("idEmpresa", $empresa->getId());
        $statement->execute();

        $resultado = $statement->fetchAll();

        return $resultado;
    }

}